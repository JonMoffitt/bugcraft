// Date: 11/2/2013 8:15:33 AM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package bugcraft.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class butterfly extends ModelBase
{
  //fields
    ModelRenderer Body;
    ModelRenderer Butt;
    ModelRenderer RightEye;
    ModelRenderer LeftEye;
    ModelRenderer left_wing_base;
    ModelRenderer right_wing_base;
    ModelRenderer right_wing_main;
    ModelRenderer left_wing_main;
    ModelRenderer left_wing_top;
    ModelRenderer left_wing_bottom;
    ModelRenderer right_wing_top;
    ModelRenderer right_wing_bottom;
    
    boolean isFlappingWing;
    int flapWingCount;
  
  public butterfly()
  {
	  isFlappingWing = false;
	  flapWingCount = 0;
	  
	  textureWidth = 32;
	  textureHeight = 32;
    
      Body = new ModelRenderer(this, 27, 13);
      Body.addBox(0F, 0F, 0F, 1, 8, 1);
      Body.setRotationPoint(0F, 0F, 0F);
      Body.setTextureSize(32, 32);
      Body.mirror = true;
      setRotation(Body, 0F, 0F, 0F);
      Butt = new ModelRenderer(this, 21, 11);
      Butt.addBox(0F, 0F, 0F, 1, 4, 1);
      Butt.setRotationPoint(-1F, 5F, 0F);
      Butt.setTextureSize(32, 32);
      Butt.mirror = true;
      setRotation(Butt, 0F, 0F, 0F);
      RightEye = new ModelRenderer(this, 27, 10);
      RightEye.addBox(0F, 0F, 0F, 1, 1, 1);
      RightEye.setRotationPoint(1F, 0F, 1F);
      RightEye.setTextureSize(32, 32);
      RightEye.mirror = true;
      setRotation(RightEye, 0F, 0F, 0F);
      LeftEye = new ModelRenderer(this, 27, 10);
      LeftEye.addBox(0F, 0F, 0F, 1, 1, 1);
      LeftEye.setRotationPoint(1F, 0F, -1F);
      LeftEye.setTextureSize(32, 32);
      LeftEye.mirror = true;
      setRotation(LeftEye, 0F, 0F, 0F);
      left_wing_base = new ModelRenderer(this, 2, 21);
      left_wing_base.addBox(0F, 0F, 0F, 1, 3, 4);
      left_wing_base.setRotationPoint(0F, 3F, 1F);
      left_wing_base.setTextureSize(32, 32);
      left_wing_base.mirror = true;
      setRotation(left_wing_base, 0F, -0.6897665F, 0F);
      right_wing_base = new ModelRenderer(this, 2, 21);
      right_wing_base.addBox(0F, 0F, -4F, 1, 3, 4);
      right_wing_base.setRotationPoint(0F, 3F, 0F);
      right_wing_base.setTextureSize(32, 32);
      right_wing_base.mirror = true;
      setRotation(right_wing_base, 0F, 0.6490766F, 0F);
      right_wing_main = new ModelRenderer(this, 2, 7);
      right_wing_main.addBox(0F, 0F, -4F, 1, 9, 3);
      right_wing_main.setRotationPoint(0F, 0F, 0F);
      right_wing_main.setTextureSize(32, 32);
      right_wing_main.mirror = true;
      setRotation(right_wing_main, 0F, 0.6490766F, 0F);
      left_wing_main = new ModelRenderer(this, 2, 7);
      left_wing_main.addBox(0F, 0F, 2F, 1, 9, 3);
      left_wing_main.setRotationPoint(0.3F, 0F, 0.6F);
      left_wing_main.setTextureSize(32, 32);
      left_wing_main.mirror = true;
      setRotation(left_wing_main, 0F, -0.6893534F, 0F);
      left_wing_top = new ModelRenderer(this, 16, 20);
      left_wing_top.addBox(0F, 0F, -6F, 1, 4, 3);
      left_wing_top.setRotationPoint(0F, -2F, 0F);
      left_wing_top.setTextureSize(32, 32);
      left_wing_top.mirror = true;
      setRotation(left_wing_top, 0F, 0.6490766F, 0F);
      left_wing_bottom = new ModelRenderer(this, 11, 12);
      left_wing_bottom.addBox(0F, 0F, -5.3F, 1, 4, 3);
      left_wing_bottom.setRotationPoint(0F, 7F, 0F);
      left_wing_bottom.setTextureSize(32, 32);
      left_wing_bottom.mirror = true;
      setRotation(left_wing_bottom, 0F, 0.6490766F, 0F);
      right_wing_top = new ModelRenderer(this, 16, 20);
      right_wing_top.addBox(0F, 0F, 4F, 1, 4, 3);
      right_wing_top.setRotationPoint(0F, -2F, 1F);
      right_wing_top.setTextureSize(32, 32);
      right_wing_top.mirror = true;
      setRotation(right_wing_top, 0F, -0.6893534F, 0F);
      right_wing_bottom = new ModelRenderer(this, 11, 12);
      right_wing_bottom.addBox(0F, 0F, 3F, 1, 4, 3);
      right_wing_bottom.setRotationPoint(0F, 7F, 1F);
      right_wing_bottom.setTextureSize(32, 32);
      right_wing_bottom.mirror = true;
      setRotation(right_wing_bottom, 0F, -0.6893534F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    Body.render(f5);
    Butt.render(f5);
    RightEye.render(f5);
    LeftEye.render(f5);
    left_wing_base.render(f5);
    right_wing_base.render(f5);
    right_wing_main.render(f5);
    left_wing_main.render(f5);
    left_wing_top.render(f5);
    left_wing_bottom.render(f5);
    right_wing_top.render(f5);
    right_wing_bottom.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity) {
  
	  super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
	    float currentRotation = right_wing_top.rotateAngleY;
	    if (isFlappingWing) {
	    	if (flapWingCount > 25) {
	    		isFlappingWing = false;
	    	}
	    	flapWingCount+= 1;
	    	right_wing_top.rotateAngleY -= .03;
	    	left_wing_base.rotateAngleY -= .03;
	    	left_wing_main.rotateAngleY -= .03;
	    	right_wing_bottom.rotateAngleY -= .03;
	    	
	    	left_wing_top.rotateAngleY += .03;
	    	right_wing_base.rotateAngleY += .03;
	    	right_wing_main.rotateAngleY += .03;
	    	left_wing_bottom.rotateAngleY += .03;
	    	return;
	    }
	    else if (flapWingCount > 0) {
			right_wing_top.rotateAngleY += .03;
			left_wing_base.rotateAngleY += .03;
			left_wing_main.rotateAngleY += .03;
			right_wing_bottom.rotateAngleY += .03;
			
			left_wing_top.rotateAngleY -= .03;
	    	right_wing_base.rotateAngleY -= .03;
	    	right_wing_main.rotateAngleY -= .03;
	    	left_wing_bottom.rotateAngleY -= .03;
	    	flapWingCount -= 1;
			return;
		}
		else {
			isFlappingWing = true;
			return;
		}
  }
}
